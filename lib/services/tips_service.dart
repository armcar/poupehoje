import 'dart:math';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';

/// Servi√ßo respons√°vel por obter e guardar em cache as dicas de poupan√ßa.
///
/// Utiliza√ß√£o t√≠pica:
/// ```dart
/// final dica = await TipsService.instance.getDicaAleatoria();
/// ```
class TipsService {
  TipsService._();

  static final TipsService instance = TipsService._();

  String? _cachedTip; // üß† cache em mem√≥ria

  /// Retorna uma dica aleat√≥ria de poupan√ßa (com cache tempor√°ria).
  Future<String> getDicaAleatoria() async {
    // se j√° temos uma dica em cache, devolvemos logo
    if (_cachedTip != null) return _cachedTip!;

    try {
      final snapshot =
          await FirebaseFirestore.instance.collection('tips').get();

      if (snapshot.docs.isEmpty) {
        _cachedTip = 'üí° Dica: comece a poupar hoje!';
      } else {
        final docs = snapshot.docs;
        final randomIndex = Random().nextInt(docs.length);
        final data = docs[randomIndex].data();

        final icon = data['icon'] ?? 'üí°';
        final text = data['text'] ?? 'Dica: reveja o seu or√ßamento.';
        _cachedTip = "$icon $text";
      }
    } catch (e) {
      debugPrint('‚ùå Erro ao obter dica: $e');
      _cachedTip = 'üí° Dica: reveja o seu or√ßamento e defina metas semanais.';
    }

    return _cachedTip!;
  }

  /// Limpa a cache (ex: quando o utilizador faz pull-to-refresh)
  void limparCache() {
    _cachedTip = null;
  }
}
